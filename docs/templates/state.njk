{% extends '_base.njk' %}

{% block content %}
<br><br>

<h1 id="">State</h1>

<span code>state()</span> allows you to store and work with stateful values in your reactive flows:

<pre try="https://stackblitz.com/edit/connective-st-ex1">
  <code class="javascript">/*!*/import { wrap, map, state, pipe } from '@connectv/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

let a = document.getElementById('a') as HTMLInputElement;
let p = document.getElementById('p');

/*!*/let s = state();

wrap(fromEvent(a, 'input'))      //--&gt; when something is typed
  .to(map(() =&gt; a.value))        //--&gt; map it to the input value
  .to(pipe(debounceTime(1000)))  //--&gt; wait for the typing to finish
/*!*/  .to(s.input);                  //--&gt; set the state

//
// this will emit only when the state changes
// so you cannot have something like
//
// &gt; state change: hellow
// &gt; state change: hellow
//
/*!*/s.output.subscribe(v =&gt; p.innerHTML += '&gt; state change: ' + v + '&lt;br&gt;');</code>
</pre>

<span code>state()</span>s support implicit connection, so you could shorten the code above like this:

<pre try="https://stackblitz.com/edit/connective-st-ex1b">
<code class="javascript">import { wrap, map, state, pipe } from '@connectv/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

let a = document.getElementById('a') as HTMLInputElement;
let p = document.getElementById('p');

wrap(fromEvent(a, 'input'))      //--&gt; when something is typed
  .to(map(() =&gt; a.value))        //--&gt; map it to the input value
  .to(pipe(debounceTime(1000)))  //--&gt; wait for the typing to finish
  .to(state())                  //--&gt; set the state
  .subscribe(v =&gt; p.innerHTML += '&gt; state change: ' + v + '&lt;br&gt;');</code>
</pre>

<h2 id="late-sub">Late subscription</h2>

<span code>state()</span> emits its value to late subscribers as well:

<pre try="https://stackblitz.com/edit/connective-st-ex2">
  <code class="javascript">import { wrap, map, state, pipe } from '@connectv/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

let a = document.getElementById('a') as HTMLInputElement;
let btn = document.getElementById('btn');
let p = document.getElementById('p');
let p2 = document.getElementById('p2');

let s = state();

wrap(fromEvent(a, 'input'))      //--&gt; when something is typed
  .to(map(() =&gt; a.value))        //--&gt; map it to the input value
  .to(pipe(debounceTime(1000)))  //--&gt; wait for the typing to finish
  .to(s)                         //--&gt; set the state
  .subscribe(v =&gt; p.innerHTML = 'state: ' + v);

/*!*/wrap(fromEvent(btn, 'click'))
/*!*/  .subscribe(() =&gt; {
/*!*/    //
/*!*/    // so this guy subscribes on the state well after
/*!*/    // the latest value was emitted to it, but still
/*!*/    // receives the latest value:
/*!*/    //
/*!*/    s.subscribe(v =&gt; p2.innerHTML = 'received: ' + v).unsubscribe();
/*!*/  });</code>
</pre>

<h2 id="initial-value">Initial value</h2>

You can provide an initial value to <span code>state()</span> as well:

<pre try="https://stackblitz.com/edit/connective-st-ex5">
  <code class="javascript">import { wrap, map, state } from '@connectv/core';
import { fromEvent } from 'rxjs';

let i = document.getElementById('i') as HTMLInputElement;
let p = document.getElementById('p');

wrap(fromEvent(i, 'input'))
  .to(map(() =&gt; i.value))
  .to(map(x =&gt; x * 2))
/*!*/  .to(state(42))             //--&gt; so lets start with 42
  .subscribe(v =&gt; p.innerHTML = v);</code>
</pre>

<h2 id="value-access">Accessing state value</h2>

You can read the latest value of a <span code>state()</span> or set it manually
via <span code>.value</span> property:

<pre try="https://stackblitz.com/edit/connective-st-ex6">
  <code class="javascript">import { state } from '@connectv/core';
import { fromEvent } from 'rxjs';

let i = document.getElementById('i') as HTMLInputElement;
let btn = document.getElementById('btn');
let d = document.getElementById('d');

//
// --&gt; so lets display a list tof stuff that we can add to and remove from
//

let stuff = state([]);

stuff.subscribe(list =&gt; {                     // --&gt; when list updates
  d.innerHTML = '';                           // --&gt; KIDS, this is why we have vdom
  list.forEach(thing =&gt; {
    let div = document.createElement('div');  // --&gt; create a div for each thing
    div.innerText = thing.text;               // --&gt; show its `.text`
    fromEvent(div, 'click').subscribe(() =&gt; { // --&gt; when the div is clicked
/*!*/      stuff.value = 
/*!*/        stuff.value.filter(t =&gt; t !== thing); // --&gt; remove the thing
    });

    d.appendChild(div);                       // --&gt; yeah add the div to document
  });
});

fromEvent(btn, 'click').subscribe(() =&gt; {     // --&gt; when the 'Add' button is clicked
/*!*/  stuff.value = 
/*!*/    stuff.value.concat([{ text: i.value }]);  // --&gt; add a thing
  i.value = '';
});</code>
</pre>

<h2 id="change-detection">Change detection</h2>

<span code>state()</span> only changes its value and emits when it receives a value that is
<i>deeply</i> different:

<pre try="https://stackblitz.com/edit/connective-st-ex3">
  <code class="javascript">import { source, state } from '@connectv/core';

let a = source();

a.to(state()).subscribe(console.log);

/*!*/a.send([1, 2, 3]);
/*!*/a.send([1, 2, 3]);    //--&gt; this one does not get logged
/*!*/a.send([1, 2, 3, 4]);</code>
</pre>

You can change this behavior by providing a custom equality function:

<pre try="https://stackblitz.com/edit/connective-st-ex4">
  <code class="javascript">import { source, state } from '@connectv/core';

let a = source();

/*!*/a.to(state((x, y) =&gt; x == y)) //--&gt; provide custom equality check
  .subscribe(console.log);

/*!*/a.send([1, 2, 3]);
/*!*/a.send([1, 2, 3]);                //--&gt; this is logged too
/*!*/a.send([1, 2, 3, 4]);</code>
</pre>

<h2 id="signature">Signature</h2>

Each <span code>state()</span> has an input pin named <span code>"value"</span> and an output pin
named <span code>"value"</span>, which are also accessible via shortcut properties <span code>.input</span>
and <span code>.output</span> respectively.

<pre><code class="javascript">let s = state();

s.in("value") == s.input;
s.out("value") == s.output;</code></pre>

<br><br>

<h2 id="further-reading">Further reading</h2>

<ul>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/agent/test/state.test.ts" target="_blank">
      Specification (test suite)
    </a>
  </li>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/agent/state.ts" target="_blank">
      Source code
    </a>
  </li>
</ul>

{% endblock %}
