{% extends '_base.njk' %}

{% block content %}
<br><br>

<h1 id="">Value</h1>

<span code>value()</span> is like <span code><a href="/docs/control">control()</span></a>,
except it will emit the given value:

<pre try="https://stackblitz.com/edit/connective-val-ex1">
  <code class="javascript">import { wrap, value } from '@connectv/core';
import { fromEvent } from 'rxjs';

let btn = document.getElementById('btn');

wrap(fromEvent(btn, 'click')).to(value('HELLOW!')).subscribe(console.log);</code>
</pre>

A <span code>value()</span> can also be the source of a flow:

<pre try="https://stackblitz.com/edit/connective-val-ex2">
  <code class="javascript">import { value, spread, pipe } from '@connectv/core';
import { timer } from 'rxjs';
import { delayWhen } from 'rxjs/operators';

value([1, 2, 3, 4, 5])                 //--&gt; start with this array
.to(spread())                          //--&gt; spread it
.to(pipe(                              //--&gt; delay based on value
  delayWhen(                           //--&gt; note that in pipe(), you get
    e =&gt; timer(1000 - e.value * 100))  //... emissions not values,
  )                                    //... hence 'e.value'
)
.subscribe(console.log);</code>
</pre>

<h2 id="further-reading">Further reading</h2>

<ul>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/pin/test/value.test.ts" target="_blank">
      Specification (test suite)
    </a>
  </li>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/pin/value.ts" target="_blank">
      Source code
    </a>
  </li>
</ul>

{% endblock %}
