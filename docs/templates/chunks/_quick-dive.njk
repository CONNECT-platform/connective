<b>CONNECTIVE</b> is about creating reactive flows. A reactive flow typically starts with some source of data/events,
leading to some sinks for those data/events which would consume them, possibly going through and being transformed by
some other nodes along the way:

<pre>
<code class="javascript">import { source, sink, pin } from '@connectv/core';

let a = source();
let b = pin();
let c = sink(value =&gt; console.log(value));

a.to(b).to(c); // --&gt; data/events go from a to b then to c.

c.bind();

a.send('hellow!');
a.send('world!');</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-1" target="_blank">TRY IT!</a>
</div>

<pre>
<code class="javascript">import { source, sink, pin } from '@connectv/core';

let a = source();
let b = pin();
let c = sink(v =&gt; console.log(v));

c.from(b).from(a); // --&gt; data/events that c receives come from b which in turn come from a.

c.bind();

a.send('hellow!');
a.send('world!');</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-2" target="_blank">TRY IT!</a>
</div>

Every node of such a flow is represented by a
<a href="/docs/pin">Pin</a>
(or some
<a href="https://github.com/CONNECT-platform/connective/blob/master/src/pin/pin-like.ts" target="_blank">PinLike</a>
object). The
<a href="/docs/pin"><span code>pin()</span></a>,
<a href="/docs/source"><span code>source()</span></a> and
<a href="/docs/sink"><span code>sink()</span></a> functions all return a <i>Pin</i>.

<br><br>

You can connect pins to each other using their
<a href="/docs/pin#connecting"><span code>.to()</span></a> and <span code>.from()</span> methods.
You can pass multiple parameters to <span code>.to()</span> and <span code>.from()</span>, causing the <i>Pin</i>
to be connected to multiple pins:

<pre>
<code class="javascript">import { source, sink } from '@connectv/core';

let a = source();
let b = sink(value =&gt; console.log('B::' + value));
let c = sink(value =&gt; console.log('C::' + value));

a.to(b, c); // --&gt; stuff from a goes to both b and c
b.bind(); c.bind();

a.send('hellow!');
a.send('world!');</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-3" target="_blank">TRY IT!</a>
</div>

<pre>
<code class="javascript">import { source, sink } from '@connectv/core';

let a = source();
let b = source();
let c = sink(value =&gt; console.log(value));

c.from(a, b); c.bind(); // --&gt; c's stuff come from both a and b

a.send('hellow!');
b.send('world!');</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-4" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : SUBSCRIBE ---------->

<h3 id="subscribe">Subscribing</h3>

You can directly subscribe on any <i>Pin</i> using its <a href="/docs/pin#subscribe"><span code>.subscribe()</span></a> method, so you don't need to use <span code>sink()</span> all the time.
You can also use <a href="/docs/group"><span code>group()</span></a> to work with a multitude of <i>Pins</i> at once:

<pre>
<code class="javascript">import { source, pin, group } from '@connectv/core';

let a = source();
let b = source();

group(a, b).to(pin()).subscribe(v =&gt; console.log(v));

a.send('hellow!');
b.send('world!');</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-5" target="_blank">TRY IT!</a>
</div>

Note that:
<ul>
  <li>the <span code>.bind()</span> method is not present on all pin types.</li>
  <li>when you call <span code>.subscribe()</span> or <span code>.bind()</span> methods of a pin, the pin
becomes <i>locked</i>. You cannot connect any new pin to a locked pin.</li>
  <li>if a pin is connected to another locked pin, it will become locked as well.</li>
  <li>you can check if a pin is locked via its <span code>.locked</span> property.</li>
</ul>

<pre>
<code class="javascript">import { pin } from '@connectv/core';

let a = pin();
let b = pin();
a.to(b);

console.log('A:: ' + a.locked + ' B:: ' + b.locked);
// &gt; 'A:: false B:: false'

b.subscribe();
console.log('A:: ' + a.locked + ' B:: ' + b.locked);
// &gt; 'A:: true B:: true'</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-6" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : OTHER SOURCES ---------->

<h3 id="other-sources">Sources</h3>

You can also create sources from plain values or from <i>Observables</i>:

<pre>
<code class="javascript">import { wrap, value, pin, group } from '@connectv/core';
import { interval } from 'rxjs';

let a = value('hellow world!'); // --&gt; a emits 'hellow world!' once
let b = wrap(interval(1000));   // --&gt; b emits a number every 1000ms

group(a, b).to(pin()).subscribe(v =&gt; console.log(v));</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-7" target="_blank">TRY IT!</a>
</div>

Note that you cannot connect any pin to <a href="/docs/wrap"><span code>wrap()</span></a>.
<br><br>

<!---------- QUICK-DIVE : SPREAD ---------->

<h3 id="spread">Spread</h3>

You can use <a href="/docs/spread"><span code>spread()</span></a> to turn incoming values into multiple emissions:

<pre>
<code class="javascript">import { spread, value } from '@connectv/core';

value([1, 2, 3, 4, 5, 6])
.to(spread())
.subscribe(v =&gt; console.log(v));</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-8" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : FILTER & MAP ---------->

<h3 id="filter-n-map">Filter & Map</h3>

You can change incoming values using <a href="/docs/map"><span code>map()</span></a>, and let them through or block them using
<a href="/docs/filter"><span code>filter()</span></a>:

<pre>
<code class="javascript">import { spread, value, filter, map } from '@connectv/core';

value([1, 2, 3, 4, 5, 6])
.to(spread())
.to(filter(v =&gt; v % 2 == 0)) // --&gt; only allow even ones through
.to(map(v =&gt; v * 10))        // --&gt; multiply each value by 10
.subscribe(v =&gt; console.log(v));</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-9" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : CONTROL ---------->

<h3 id="control">Control</h3>

You can break your flow into multiple branches and join them back using <a href="/docs/control"><span code>control()</span></a>:

<pre>
<code class="javascript">import { spread, value, map, control } from '@connectv/core';

value([1, 2, 3, 4, 5, 6])
.to(spread())
.to(
map(v =&gt; v * 10),
map(v =&gt; v * 100),
)
.to(control()) // --&gt; will wait for all incoming emissions and join them pair-wise
.subscribe(v =&gt; console.log(v));</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-10" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : LOOP ---------->

<h3 id="loop">Loops</h3>

You can even create loops in your flow:

<pre>
<code class="javascript">import { source, map, filter } from '@connectv/core';

let a = source();
let m = map(x =&gt; x + 1); // --&gt; lets give this pin a name so we can loop back to it

a.to(m)
.to(filter(x =&gt; x &lt; 10)) // --&gt; keep looping until we reach 10
.to(m)                   // --&gt; looping back to m
.subscribe(v =&gt; console.log(v));

a.send(0);</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-11" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : PIPE ---------->

<h3 id="pipe">Pipe</h3>

In the example above, the order is not necessarily preserved. You can for example enforce the order by using
<b>RxJS</b>'s <span code>delay()</span> operator:

<pre>
<code class="javascript">import { source, map, filter, pipe } from '@connectv/core';
import { delay } from 'rxjs';

let a = source();
let m = map(x =&gt; x + 1); // --&gt; lets give this pin a name so we can loop back to it

a.to(m)
.to(filter(x =&gt; x &lt; 10)) // --&gt; keep looping until we reach 10
.to(pipe(delay(1)))      // --&gt; wait a bit
.to(m)                   // --&gt; looping back to m
.subscribe(v =&gt; console.log(v));

a.send(0);</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-12" target="_blank">TRY IT!</a>
</div>

<a href="/docs/pipe"><span code>pipe()</span></a> allows you to use any <b>RxJS</b> pipeable operator.
Note that values are not passed directly to pipeable operators, they are wrapped in
<a href="/docs/emission">Emission</a>
objects, and their return value should
also be of that type.

<br><br>

<!---------- QUICK-DIVE : COMPOSITION ---------->

<h3 id="composition">Composition</h3>

You can re-use parts of your reactive flows using the
<a href="/docs/composition">Composition</a>
class:

<pre>
<code class="javascript">import { Composition, source, filter } from '@connectv/core';

class EvenOdd extends Composition {
  constructor() {
    super({
      inputs: ['a'],            // --&gt; marks pins that go into the flow
      outputs: ['even', 'odd']  // --&gt; marks pins that go out of the flow
    });
  }

  build() {
    //
    // build all the elements of the flow
    //
    this.add('oddFilter', filter(x =&gt; x % 2 == 1));
    this.add('evenFilter', filter(x =&gt; x % 2 == 0));
  }

  wire() {
    //
    // wire the flow together
    //
    this.in('a').to(this.pin('oddFilter')).to(this.out('odd'));
    this.in('a').to(this.pin('evenFilter')).to(this.out('even'));
  }
}

//
// now using the composition:
//

let a = source();
let eo = new EvenOdd();

a.to(eo.in('a'));
eo.out('even').subscribe(v =&gt; console.log('EVEN:: ' + v));
eo.out('odd').subscribe(v =&gt; console.log('ODD:: ' + v));

a.send(2);
a.send(3);
a.send(4);</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-13" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : AGENT ---------->
<h3 id="agent">Agent</h3>

Compositions are sub-classes of
<a href="/docs/agent">Agent</a>
class. This base class represents all re-usable reactive flows. <b>CONNECTIVE</b> comes with a number
of useful agents that you can use in creating your own flows and compositions.

<br><br>

The main property of an Agent is its <i>Signature</i>. A signature is simply an object with a list of
strings named <span code>inputs</span> and a list of strings named <span code>outputs</span>. These two lists
denote the possible names of the incoming and outgoing pins of the Agent.

<br><br>

<!---------- QUICK-DIVE : EXPR ---------->
<h3 id="expr">Expr</h3>

<a href="/docs/expr"><span code>expr()</span></a> allows you to convert any function into an agent:


<pre>
<code class="javascript">import { source, expr } from '@connectv/core';

let a = source();
let b = source();
let e = expr((a, b) =&gt; `${a} + ${b} = ${a + b}`);

a.to(e.in(0));
b.to(e.in(1));
e.result.subscribe(v =&gt; console.log(v));  // --&gt; this is a short-hand for `e.out('result')`

a.send(2); b.send(3);
a.send(42); b.send(30);</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-14" target="_blank">TRY IT!</a>
</div>

Notice how the expr is called for every new value provided by the sources after the two initial values.

<br><br>

<!---------- QUICK-DIVE : NODE ---------->
<h3 id="node">Node</h3>
A <a href="/docs/node">Node</a>
is basically a more complex version of an Expr, allowing you to emit to any outputs denoted in the signature
(instead of just <span code>"result"</span> pin). You can create nodes easily using <span code>node()</span> function:

<pre>
<code class="javascript">import { source, node } from '@connectv/core';

let N = node({ inputs: ['a'], outputs: ['even', 'odd']}, // --&gt; set the signature
(input, output) =&gt; {
if (input.a % 2 == 0) output('even', input.a);
else output('odd', input.a);
});


let a = source();
let n = N(); // --&gt; create a new instance of the agent we defined above

a.to(n.in('a'));
n.out('even').subscribe(v =&gt; console.log('EVEN:: ' + v));
n.out('odd').subscribe(v =&gt; console.log('ODD:: ' + v));

a.send(3);
a.send(4);
a.send(5);</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-15" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : GATE ---------->
<h3 id="gate">Gate</h3>

You can control when some emission passes through via another emission using <a href="/docs/gate"><span code>gate()</span></a>

<pre>
<code class="javascript">import { source, gate, map, spread, pipe, group, control } from '@connectv/core';
import { delay } from 'rxjs/operators';

let a = source();
let g = gate();

a.to(map(v =&gt; v.split(' '))) // --&gt; get all the words
.to(spread())                // --&gt; spread them
.to(g.input);                // --&gt; this is shorthand for `g.in('value')`

group(g.output, control())   // --&gt; the `control()` causes a signal to be sent before the first output of the gate
.to(pipe(delay(1000)))       // --&gt; wait one second after each word comes out
.to(g.control);              // --&gt; open the gate again (letting next word through)

g.output.subscribe(v =&gt; console.log(v));

a.send("Hellow darkness my old friend I've come to talk with you again");</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-16" target="_blank">TRY IT!</a>
</div>

In this example, <span code>g.control</span> is a <a href="/docs/control">control pin</a> that will cause the
gate to let emissions through when it receives a value itself. This pin is not mentioned in the gate's
signature. Alongside gate, some other agent types (such as <span code>node()</span> and <span code>expr()</span>)
also have this controlling pin (always accessible via <span code>.control</span>) which allows controlling
the behavior of the agent.

<br><br>

<!---------- QUICK-DIVE : STATE ---------->
<h3 id="state">State</h3>
You can keep reactive state values within your flows using <a href="/docs/state"><span code>state()</span></a>. For example, the following code
introduces a composition that represents the state of a <i>html input</i>, which is built on top of
<span code>state()</span>,
and then uses that composition to bind two inputs together:

<pre>
<code class="javascript">import { wrap, map, state, sink, Composition } from '@connectv/core';
import { fromEvent } from 'rxjs';

class InputState extends Composition {
  constructor(readonly el: HTMLInputElement) {
    super({
      inputs: ['value'],
      outputs: ['value']
    });

    //
    // we need access to `this.el` in wire(), but if parent class calls it,
    // we will not get that access. as a result we need to call them ourselves.
    //
    this.build();
    this.wire();
  }

  init() {}       // --&gt; prevent parent class from calling build() and wire()

  build() {
    this.add('model', state());
    this.add('sink', sink(val =&gt; this.el.value = val));
  }

  wire() {
    this.in('value').to(this.agent('model').in('value'));

    wrap(fromEvent(this.el, 'input'))
    .to(map(() =&gt; this.el.value))
    .to(this.agent('model').in('value'));

    this.agent('model').out('value')
    .to(this.pin('sink'))
    .to(this.out('value'));
  }
}


let a = new InputState(document.getElementById('a') as HTMLInputElement);
let b = new InputState(document.getElementById('b') as HTMLInputElement);

a.out('value').to(b.in('value')); // --&gt; literal two-way binding
b.out('value').to(a.in('value'));

a.bind(); // --&gt; .bind() on composition will call .bind() on all child nodes having that method
b.bind();</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-17" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : SEQUENCE ---------->
<h3 id="sequence">Sequence</h3>

The <a href="/docs/sequence"><span code>sequence()</span></a> agent allows you to distinguish specific sequences of events
coming from various sources:

<pre>
<code class="javascript">import { wrap, map, sequence, group } from '@connectv/core';
import { fromEvent } from 'rxjs';

let click = sequence(1, 0, 1);  // --&gt; a click is one mousedown, no mousemove, and one mouseup
let drag = sequence(1, '+', 1); // --&gt; a drag is one mousedown, some mousemove, and one mouseup

wrap(fromEvent(document, 'mousedown')).to(click.in(0), drag.in(0));
wrap(fromEvent(document, 'mousemove')).to(click.in(1), drag.in(1));
wrap(fromEvent(document, 'mouseup'))  .to(click.in(2), drag.in(2));

group(
click.output.to(map(() =&gt; 'CLICK!!')),
drag.output.to(map(() =&gt; 'DRAG!!'))
).subscribe(v => console.log(v));</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-cheat-18" target="_blank">TRY IT!</a>
</div>

<!---------- QUICK-DIVE : MEMORY ---------->

<h3 id="memory">Memory Management</h3>

All pins and agents in <b>CONNECTIVE</b> come with a <span code>.clear()</span> method that will dispose
all of their internal references. The <span code>.clear()</span> method of a <i>Composition</i> will also
clear all of its child nodes.
<br><br>
<b>WARNING</b>: Calling <span code>.clear()</span> will make the pin or the agent completely unusable afterwards,
so you should call it only when you are done with the object.

<pre>
<code class="javascript">let myPin = ...;
let myAgent = ...;

//
// do your stuff
//

myPin.clear();
myAgent.clear();</code>
</pre>

Additionally, every <span code>.subscribe()</span> method returns an instance of
<a href="https://rxjs-dev.firebaseapp.com/guide/subscription" target="_blank">
  <b>RxJS</b>'s Subscription
</a>
, which is equiped with a <span code>.unsubscribe()</span> method. You should maintain the references
for subscribptions that you would want to dispose of later, and call their <span code>.unsubscribe()</span>
method.

<pre>
<code class="javascript">let myPin = ...;
//
// do whatever
//

let sub = myPin.subscribe(...);

//
// some other stuff
//

sub.unsubscribe();</code>
</pre>

If you need to call your clearing logic when some other flow is finished/cleared, call it on
<i>complete</i> notification of your subscription to the flow:

<pre>
<code class="javascript">mySource
.to(...)
.to(...)
.subscribe(
value =&gt; do_something_with_value(value),
undefined,
() =&gt; clear_everything_up()
);</code>
</pre>

You can find more details about memory management in <b>CONNECTIVE</b> <a href="/docs/memory">here</a>.
