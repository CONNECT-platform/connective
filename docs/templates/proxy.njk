{% extends '_base.njk' %}

{% block content %}
<br><br>

<h1 id="">Proxy</h1>

<span code>proxy()</span> allows you to dynamically attach <a href="/docs/agent"><span code>Agent</span></a>s to your
reactive flows at a later stage.

<br><br>

For example, imagine we have a dynamic list of inputs (for example, inputs are added because of user action) and you
need all your inputs to share the same state. For this purpose, we can use a composition like the following to
manage the state of any given input:

<pre try="https://stackblitz.com/edit/connective-proxy-ex1?file=input-state.ts">
<code class="javascript">import { wrap, map, state, State, 
      group, sink, Composition } from '@connectv/core';
import { fromEvent } from 'rxjs';

//
// This class is used to work with the state of an html input
// in another reactive flow.
//
export class InputState extends Composition {
  model: State;

  constructor(readonly el: HTMLInputElement) {
    super({
      inputs: ['value'],
      outputs: ['value']
    });

    //
    // we need access to `this.el` in wire(), but if parent class calls it,
    // we will not get that access. as a result we need to call them ourselves.
    //
    this.build();
    this.wire();
  }

  init() {}       // --&gt; prevent parent class from calling build() and wire()

  build() {
    this.model = this.add(state()) as State;
    this.add('sink', sink(val =&gt; this.el.value = val));
  }

  wire() {
    group(
      this.in('value'),
      wrap(fromEvent(this.el, 'input'))
        .to(map(() =&gt; this.el.value))
    ).to(this.model.input);

    this.model.output
    .to(this.pin('sink'))
    .to(this.out('value'));
  }
}</code>
</pre>

Our <span code>InputState</span> class acts like a <a href="/docs/state"><span code>state()</span></a> that is also
bound to the given input. We can bind each single <span code>InputState</span> to another <span code>state()</span>,
or bind multiple <span code>InputState</span> to a single shared <span code>state()</span>, so that all of them, well,
share the state.

<br><br>

However, in our case, we do not have our inputs (and by extension, <span code>InputState</span>s) available at the
time of defining the reactive flow that describes the binding. Instead, we can use a <span code>proxy()</span> that is
bound to the shared state, and when the <span code>InputState</span>s are created, use our <span code>proxy()</span>
to proxy the newly created agents into our flow:

<pre try="https://stackblitz.com/edit/connective-proxy-ex1?file=index.ts">
<code>/*!*/import { wrap, proxy, state } from '@connectv/core';
import { fromEvent } from 'rxjs';

import { InputState } from './input-state';

//
// GOAL: in this example, we want a dynamic number of inputs
// to have a shared state, and we should also have access to that
// state and for example display it in a &lt;p&gt; element.
//

let p = document.getElementById('p');
let btn = document.getElementById('btn');

//
//--&gt; to ensure all inputs share the state, we create this
//--&gt; 'shared' state so that we can bind all input states to it.
//
let shared = state();

//
//--&gt; we do not have any inputs yet (so no `InputState`s as well),
//--&gt; so we create a proxy for all of them.
//
/*!*/let inputProxy = proxy({ inputs: ['value'], outputs: ['value']});

/*!*/shared.output.to(inputProxy.in('value')); //--&gt; now lets bind the proxy to the shared state
/*!*/inputProxy.out('value').to(shared.input); //... so that all `InputState`s will be bound to it

shared.output.subscribe(v =&gt; p.innerHTML = v); //--&gt; also display the value of the shared state

fromEvent(btn, 'click').subscribe(() =&gt; {                      //--&gt; upon click of the button...
  let i = document.createElement('input') as HTMLInputElement; //... create a new input
  i.setAttribute('type', 'text');                              //... set its type
  i.setAttribute('placeholder', 'type something ...');         //... set a placeholder
  document.body.appendChild(i);                                //... add it to the document

/*!*/  inputProxy.proxy(new InputState(i));                         //--&gt; and proxy its state
});</code>
</pre>

Lets unpack whats happening here:

<ul><li>First we create a proxy agent that represents all our future <span code>InputState</span>s in the flow
(like a placeholder). This proxy naturally has the same signature.</li></ul>

<pre><code class="javascript">let inputProxy = proxy({ inputs: ['value'], outputs: ['value'] });</code></pre>

<ul><li>Then we bind this proxy to our shared state:</li></ul>

<pre><code class="javascript">shared.output.to(inputProxy.in('value'));
inputProxy.out('value').to(shared.input);</code></pre>

<ul><li>Finally, when our actual agents are created, we proxy them into the flow using our proxy's
<span code>.proxy()</span> method. This simply means that the <span code>inputProxy</span> will 
send any emissions it receives to the newly created <span code>InputState</span>, and will send
any emissions coming out of the <span code>InputState</span>, back into the flow, as its own emissions:</li></ul>

<pre><code class="javascript">inputProxy.proxy(new InputState(i));</code></pre>

<br><br>

<h2 id="clear">Clearing up</h2>

In some cases, you might want to clear up some of the proxied agents of a <span code>proxy()</span>,
without clearing up the whole flow. The <span code>.proxy()</span> method returns a subscription,
unsubscribing from which will result in the proxied agent to be unproxied.

<br><br>

For example, in the case of previous example, imagine we would also want to dynamically remove inputs:

<pre try="https://stackblitz.com/edit/connective-proxy-ex2?file=index.ts">
<code>import { wrap, proxy, state } from '@connectv/core';
import { fromEvent } from 'rxjs';

import { InputState } from './input-state';


let p = document.getElementById('p');
let btn = document.getElementById('btn');

let shared = state();
let inputProxy = proxy({ inputs: ['value'], outputs: ['value']});

shared.output.to(inputProxy.in('value'));
inputProxy.out('value').to(shared.input);

shared.output.subscribe(v =&gt; p.innerHTML = v);

fromEvent(btn, 'click').subscribe(() =&gt; {
  let d = document.createElement('div');                       //--&gt; lets wrap everything in a div

  let i = document.createElement('input') as HTMLInputElement;
  i.setAttribute('type', 'text'); 
  i.setAttribute('placeholder', 'type something ...');
  d.appendChild(i);

  let b = document.createElement('button');                    //--&gt; so that we can add the remove
  b.textContent = 'remove';                                    //... button as well
  d.appendChild(b);

  document.body.appendChild(d);

/*!*/  let sub = inputProxy.proxy(new InputState(i));
  fromEvent(b, 'click').subscribe(() =&gt; {
    d.remove();                                                //--&gt; remove the div
/*!*/    sub.unsubscribe();                                         //--&gt; also un-proxy
  });
});</code>
</pre>

<br><br>

<h2 id="further-reading">Further reading</h2>

<ul>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/agent/test/proxy.test.ts" target="_blank">
      Specification (test suite)
    </a>
  </li>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/agent/proxy.ts" target="_blank">
      Source code
    </a>
  </li>
</ul>

{% endblock %}