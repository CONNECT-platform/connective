{% extends '_base.njk' %}

{% block content %}
<br><br>

<h1 id="">Reduce</h1>

<span code>reduce()</span> will aggregate incoming values using given aggregate function:

<pre>
  <code class="javascript">import { value, spread, reduce } from '@connectv/core';

value([1, 2, 3, 4])
.to(spread())
.to(reduce((total, each) =&gt; total + each))
.subscribe(console.log);</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-rdc-ex1" target="_blank">TRY IT!</a>
</div>

<h2 id="initial-value">Initial value</h2>

When no initial value is passed to <span code>reduce()</span> (like the example above), the first incoming value will be used
as the initial value. You can provide an initial value like this:

<pre>
  <code class="javascript">import { value, spread, reduce } from '@connectv/core';

value([1, 2, 3, 4])
.to(spread())
.to(reduce((total, each) =&gt; total * each, -1)) //--&gt; so all values will be negative
.subscribe(console.log);</code>
</pre>
<div class="buttons">
  <a class="button" href="https://stackblitz.com/edit/connective-rdc-ex1" target="_blank">TRY IT!</a>
</div>

<h2 id="purity">Function purity</h2>

The aggregate function <b>MUST</b> be pure, i.e. it should give the same result with the same inputs. Impure
aggregate functions might result in unpredictable flow behavior.

<br><br>

<h2 id="further-reading">Further reading</h2>

<ul>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/pin/test/reduce.test.ts" target="_blank">
      Specification (test suite)
    </a>
  </li>
  <li>
    <a href="https://github.com/CONNECT-platform/connective/blob/master/src/pin/reduce.ts" target="_blank">
      Source code
    </a>
  </li>
</ul>



{% endblock %}
